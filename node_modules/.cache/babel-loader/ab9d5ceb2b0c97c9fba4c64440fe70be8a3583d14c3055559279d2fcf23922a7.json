{"ast":null,"code":"const API_BASE_URL = 'https://api.helldivers2.dev/api';\n\n// Rate limiting: 5 calls per 10 seconds\nclass RateLimiter {\n  constructor(maxCalls = 5, timeWindow = 10000) {\n    this.maxCalls = maxCalls;\n    this.timeWindow = timeWindow;\n    this.calls = [];\n  }\n  async waitIfNeeded() {\n    const now = Date.now();\n\n    // Remove calls older than the time window\n    this.calls = this.calls.filter(callTime => now - callTime < this.timeWindow);\n\n    // If we've made too many calls, wait\n    if (this.calls.length >= this.maxCalls) {\n      const oldestCall = Math.min(...this.calls);\n      const waitTime = this.timeWindow - (now - oldestCall) + 100; // Add 100ms buffer\n\n      if (waitTime > 0) {\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n        return this.waitIfNeeded(); // Recursive call to check again\n      }\n    }\n\n    // Record this call\n    this.calls.push(now);\n  }\n}\nconst rateLimiter = new RateLimiter();\n\n/**\n * Fetch data from the Helldivers 2 API\n * @param {string} endpoint - The API endpoint (e.g., '/v1/war')\n * @returns {Promise<Object>} - The parsed JSON response\n */\nexport async function fetchData(endpoint) {\n  try {\n    // Wait if we need to respect rate limits\n    await rateLimiter.waitIfNeeded();\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'GET',\n      headers: {\n        'X-Super-Client': 'aj',\n        'X-Super-Contact': 'aj',\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error fetching ${endpoint}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Fetch all required data for the application\n * @returns {Promise<Object>} - Object containing all fetched data\n */\nexport async function fetchAllData() {\n  try {\n    const [warStats, assignments, planets, campaigns, dispatches, steamNews] = await Promise.all([fetchData('/v1/war'), fetchData('/v1/assignments'), fetchData('/v1/planets'), fetchData('/v1/campaigns'), fetchData('/v2/dispatches'), fetchData('/v1/steam')]);\n    return {\n      warStats,\n      assignments,\n      planets,\n      campaigns,\n      dispatches,\n      steamNews,\n      lastUpdated: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('Error fetching all data:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_BASE_URL","RateLimiter","constructor","maxCalls","timeWindow","calls","waitIfNeeded","now","Date","filter","callTime","length","oldestCall","Math","min","waitTime","Promise","resolve","setTimeout","push","rateLimiter","fetchData","endpoint","response","fetch","method","headers","ok","Error","status","data","json","error","console","fetchAllData","warStats","assignments","planets","campaigns","dispatches","steamNews","all","lastUpdated","toISOString"],"sources":["/Users/ajlaan/workspace/github.com/ajlaan-bridle/helldivers2-galactic-war-status/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'https://api.helldivers2.dev/api';\n\n// Rate limiting: 5 calls per 10 seconds\nclass RateLimiter {\n  constructor(maxCalls = 5, timeWindow = 10000) {\n    this.maxCalls = maxCalls;\n    this.timeWindow = timeWindow;\n    this.calls = [];\n  }\n\n  async waitIfNeeded() {\n    const now = Date.now();\n    \n    // Remove calls older than the time window\n    this.calls = this.calls.filter(callTime => now - callTime < this.timeWindow);\n    \n    // If we've made too many calls, wait\n    if (this.calls.length >= this.maxCalls) {\n      const oldestCall = Math.min(...this.calls);\n      const waitTime = this.timeWindow - (now - oldestCall) + 100; // Add 100ms buffer\n      \n      if (waitTime > 0) {\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n        return this.waitIfNeeded(); // Recursive call to check again\n      }\n    }\n    \n    // Record this call\n    this.calls.push(now);\n  }\n}\n\nconst rateLimiter = new RateLimiter();\n\n/**\n * Fetch data from the Helldivers 2 API\n * @param {string} endpoint - The API endpoint (e.g., '/v1/war')\n * @returns {Promise<Object>} - The parsed JSON response\n */\nexport async function fetchData(endpoint) {\n  try {\n    // Wait if we need to respect rate limits\n    await rateLimiter.waitIfNeeded();\n    \n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'GET',\n      headers: {\n        'X-Super-Client': 'aj',\n        'X-Super-Contact': 'aj',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`Error fetching ${endpoint}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Fetch all required data for the application\n * @returns {Promise<Object>} - Object containing all fetched data\n */\nexport async function fetchAllData() {\n  try {\n    const [warStats, assignments, planets, campaigns, dispatches, steamNews] = await Promise.all([\n      fetchData('/v1/war'),\n      fetchData('/v1/assignments'),\n      fetchData('/v1/planets'),\n      fetchData('/v1/campaigns'),\n      fetchData('/v2/dispatches'),\n      fetchData('/v1/steam')\n    ]);\n\n    return {\n      warStats,\n      assignments,\n      planets,\n      campaigns,\n      dispatches,\n      steamNews,\n      lastUpdated: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('Error fetching all data:', error);\n    throw error;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}